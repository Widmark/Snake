Based on the requirements, here are the core classes, functions, and methods that will be necessary for the Snake game:

1. `SnakeGame` class:
   - `__init__(self, width: int, height: int)` - Initializes the Snake game with the specified width and height.
   - `start(self)` - Starts the Snake game.
   - `update(self)` - Updates the game state.
   - `draw(self)` - Draws the game on the screen.
   - `handle_input(self, key: str)` - Handles user input for controlling the snake.
   - `game_over(self)` - Handles the game over condition.

2. `Snake` class:
   - `__init__(self, x: int, y: int)` - Initializes the Snake with the specified starting position.
   - `move(self)` - Moves the snake in the current direction.
   - `change_direction(self, direction: str)` - Changes the direction of the snake.
   - `eat(self)` - Increases the length of the snake when it eats something.
   - `check_collision(self)` - Checks if the snake has collided with itself or the boundaries of the screen.

3. `Food` class:
   - `__init__(self, x: int, y: int)` - Initializes the food with the specified position.
   - `draw(self)` - Draws the food on the screen.

Now, let's proceed with creating the necessary files and writing the code.

**game.py**
```python
import pygame
from snake import Snake
from food import Food

class SnakeGame:
    def __init__(self, width: int, height: int):
        pygame.init()
        self.width = width
        self.height = height
        self.screen = pygame.display.set_mode((width, height))
        self.clock = pygame.time.Clock()
        self.snake = Snake(width // 2, height // 2)
        self.food = Food()
        self.is_running = False

    def start(self):
        self.is_running = True
        while self.is_running:
            self.update()
            self.draw()
            self.clock.tick(10)

    def update(self):
        self.snake.move()
        if self.snake.check_collision():
            self.game_over()
        if self.snake.eat(self.food):
            self.food = Food()

    def draw(self):
        self.screen.fill((0, 0, 0))
        self.snake.draw(self.screen)
        self.food.draw(self.screen)
        pygame.display.flip()

    def handle_input(self, key: str):
        if key == pygame.K_UP:
            self.snake.change_direction("UP")
        elif key == pygame.K_DOWN:
            self.snake.change_direction("DOWN")
        elif key == pygame.K_LEFT:
            self.snake.change_direction("LEFT")
        elif key == pygame.K_RIGHT:
            self.snake.change_direction("RIGHT")

    def game_over(self):
        self.is_running = False

if __name__ == "__main__":
    game = SnakeGame(800, 600)
    game.start()
    pygame.quit()
```

**snake.py**
```python
class Snake:
    def __init__(self, x: int, y: int):
        self.x = x
        self.y = y
        self.length = 1
        self.direction = "RIGHT"
        self.body = [(x, y)]

    def move(self):
        if self.direction == "UP":
            self.y -= 10
        elif self.direction == "DOWN":
            self.y += 10
        elif self.direction == "LEFT":
            self.x -= 10
        elif self.direction == "RIGHT":
            self.x += 10
        self.body.append((self.x, self.y))
        if len(self.body) > self.length:
            del self.body[0]

    def change_direction(self, direction: str):
        if direction == "UP" and self.direction != "DOWN":
            self.direction = direction
        elif direction == "DOWN" and self.direction != "UP":
            self.direction = direction
        elif direction == "LEFT" and self.direction != "RIGHT":
            self.direction = direction
        elif direction == "RIGHT" and self.direction != "LEFT":
            self.direction = direction

    def eat(self, food):
        if self.x == food.x and self.y == food.y:
            self.length += int(self.length * 0.05)
            return True
        return False

    def check_collision(self):
        if (self.x, self.y) in self.body[:-1]:
            return True
        if self.x < 0 or self.x >= 800 or self.y < 0 or self.y >= 600:
            return True
        return False
```

**food.py**
```python
import random

class Food:
    def __init__(self):
        self.x = random.randint(0, 79) * 10
        self.y = random.randint(0, 59) * 10

    def draw(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), (self.x, self.y, 10, 10))
```

Please note that the code provided assumes that you have the necessary dependencies installed, such as `pygame`. You may need to install it using `pip install pygame` before running the code.

Additionally, you may need to adjust the screen size and other parameters based on your specific requirements.